{"version":3,"sources":["Components/CreateNewPost.jsx","Components/Post.jsx","Components/ModifyPost.jsx","Components/DisplayAllPosts.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewPost","props","type","ref","inputTitle","placeholder","size","required","onChange","title","inputContent","row","column","post","onClick","setPost","Post","content","toggleModifyPost","id","ModifyPost","defaultValue","savePostTitleToState","savePostContentToState","handleModifyPost","DisplayAllPosts","useState","setTitle","setContent","allPosts","setAllPosts","useRef","modifyIdPost","setModifyIdPost","isCreateNewPost","setIsCreateNewPost","isModifyNewPost","setIsModifyNewPost","event","target","value","toggleCreateNewPost","toggleModifyPostComponent","key","Date","now","modifyPost","find","newAllPosts","map","hasOwnProperty","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc6a05d6.chunk.js","sourcesContent":["import React  from 'react';\n\nconst CreateNewPost = (props) => {\n    return (\n    <>\n        <h2>Create New Post</h2>\n        <form>\n            <input type=\"text\" ref={props.inputTitle} placeholder=\"title\" size=\"39\" required onChange={props.title}></input>\n            <textarea ref={props.inputContent} placeholder=\"New post\" row=\"8\" column=\"41\" required onChange={props.post}></textarea><br />\n\n            <button type=\"button\" onClick={props.setPost}>Save post</button>\n        </form>\n    </>\n    )\n};\n\nexport default CreateNewPost;\n","import React from 'react';\n\nconst Post = (props) => {\n    return (\n        <>\n            <h2>Post</h2>\n            <section>\n                <h3>{props.title}</h3>\n                <p>{props.content}</p>\n\n                <button type=\"button\" onClick={() => props.toggleModifyPost(props.id)}>Edit</button>\n                <button>Delete</button>\n                <br />\n            </section>\n        </>\n    )\n};\n\nexport default Post;\n","import React from 'react';\n\nconst ModifyPost = (props) => {\n    return (\n    <>\n        <h2>Modify Post</h2>\n        <form>\n            <input type=\"text\" defaultValue={props.title} placeholder=\"title\" size=\"39\" onChange={props.savePostTitleToState}></input>\n            <textarea  row=\"8\" column=\"41\" defaultValue={props.content} onChange={props.savePostContentToState}></textarea><br />\n\n            <button type=\"button\" onClick={() => props.handleModifyPost(props.id)}>Update post</button>\n        </form>\n    </>\n    )\n};\n\nexport default ModifyPost;\n","import React, { useState, useRef } from 'react';\nimport CreateNewPost from \"./CreateNewPost\";\nimport Post from \"./Post\";\nimport ModifyPost from \"./ModifyPost\";\n\nconst DisplayAllPosts = () => {\n    const [title, setTitle] = useState(\"title initilized\");\n    const [content, setContent] = useState(\"content initilized\");\n    const [allPosts, setAllPosts] = useState('allPosts initilized');\n\n    const inputTitle = useRef();\n    const inputContent = useRef();\n\n    const [modifyIdPost, setModifyIdPost] = useState();\n\n    const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n    const [isModifyNewPost, setIsModifyNewPost] = useState(false);\n\n    const savePostTitleToState = (event) => {\n        setTitle(event.target.value);\n    }\n\n    const savePostContentToState = (event) => {\n        setContent(event.target.value);\n    }\n\n    const setPost = () => {\n        const id = Date.now();\n        setAllPosts([...allPosts, { title, content, id }]);\n        toggleCreateNewPost();\n    }\n\n    const toggleCreateNewPost = () => {\n        setIsCreateNewPost(!isCreateNewPost);\n    }\n\n    const toggleModifyPost = (id) => {\n        setModifyIdPost(id);\n        toggleModifyPostComponent();\n    }\n\n    const toggleModifyPostComponent = () => {\n        setIsModifyNewPost(!isModifyNewPost);\n    }\n\n    const handleModifyPost = (id) => {\n        const newAllPosts = allPosts.map(post => {\n            if(post.hasOwnProperty('id') && post.id === id) {\n                post.title = title;\n                post.content = content;\n            }\n\n            return post;\n        });\n\n        setAllPosts(newAllPosts);\n        setIsCreateNewPost(false)\n        setIsModifyNewPost(false);\n    }\n\n    if(isCreateNewPost) {\n        return (\n            <>\n                <CreateNewPost\n                    key={1}\n                    title={savePostTitleToState}\n                    post={savePostContentToState}\n                    inputTitle={inputTitle}\n                    inputContent={inputContent}\n                    setPost={setPost}\n                />\n            </>\n        )\n    } else if (isModifyNewPost) {\n        const modifyPost = allPosts.find(post => {\n            return post.id === modifyIdPost;\n        });\n\n        return (\n            <>\n                <ModifyPost\n                    id={modifyPost.id}\n                    title={modifyPost.title}\n                    content={modifyPost.content}\n                    savePostTitleToState={savePostTitleToState}\n                    savePostContentToState={savePostContentToState}\n                    handleModifyPost={handleModifyPost}\n                />\n            </>\n        )\n    }\n\n    return (\n        <>\n            { !allPosts.length\n                ? (<h2>No Posts</h2>)\n                : (allPosts.map(post => {\n                    return (\n                        <Post\n                            id={post.id}\n                            key={post.id}\n                            title={post.title}\n                            toggleModifyPost={toggleModifyPost}\n                            content={post.content}/>\n                    )\n                })\n            )}\n\n            <button type=\"button\" onClick={toggleCreateNewPost}>Add New Post</button>\n        </>\n    )\n};\n\nexport default DisplayAllPosts;\n","import React from 'react';\nimport DisplayAllPosts from \"./Components/DisplayAllPosts\";\n\nconst App = () => {\n  return (\n      <>\n        <h1>App</h1>\n        <DisplayAllPosts />\n      </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}